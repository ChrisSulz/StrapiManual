name: 'Tests'

on:
  push:
    branches:
      - main
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**.mdx?'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  contents: read # to fetch code (actions/checkout)
  actions: read

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: .github/filters.yaml

  lint:
    name: 'lint (node: ${{ matrix.node }})'
    needs: [changes]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [18]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - uses: nrwl/nx-set-shas@v3
      - name: Monorepo install
        uses: ./.github/actions/yarn-nm-install
      - name: Run build:ts
        run: yarn nx run-many --target=build:ts --nx-ignore-cycles --skip-nx-cache
      - name: Run lint
        run: yarn nx affected --target=lint --parallel --nx-ignore-cycles

  unit_back:
    name: 'unit_back (node: ${{ matrix.node }})'
    needs: [changes, lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [16, 18, 20]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - uses: nrwl/nx-set-shas@v3
      - name: Monorepo install
        uses: ./.github/actions/yarn-nm-install
      - name: Run build:ts
        run: yarn nx run-many --target=build:ts --nx-ignore-cycles --skip-nx-cache
      - name: Run tests
        run: yarn nx affected --target=test:unit --nx-ignore-cycles

  unit_front:
    name: 'unit_front (node: ${{ matrix.node }})'
    needs: [changes, lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [18]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - uses: nrwl/nx-set-shas@v3
      - name: Monorepo install
        uses: ./.github/actions/yarn-nm-install
      - name: Run build:ts for admin-test-utils
        run: yarn build --projects=@strapi/admin-test-utils,@strapi/helper-plugin --skip-nx-cache
      - name: Run test
        run: yarn nx affected --target=test:front --nx-ignore-cycles

  build:
    name: 'build (node: ${{ matrix.node }})'
    needs: [changes, lint, unit_front]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [16, 18, 20]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: Monorepo install
        uses: ./.github/actions/yarn-nm-install
      - name: Build
        run: yarn build --projects=@strapi/admin,@strapi/helper-plugin

  e2e:
    timeout-minutes: 60
    needs: [changes, lint, unit_front, build]
    name: 'e2e (browser: ${{ matrix.project }})'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ['chromium', 'webkit', 'firefox']
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Monorepo install
        uses: ./.github/actions/yarn-nm-install

      - name: Install Playwright Browsers
        # we need 1.37.0 to support Firefox install...
        run: npx playwright@1.37.0-alpha-jul-20-2023 install --with-deps

      - name: Run build:ts
        run: yarn nx run-many --target=build:ts --nx-ignore-cycles --skip-nx-cache

      - name: Run build
        run: yarn nx run-many --target=build --nx-ignore-cycles --skip-nx-cache

      - name: Run E2E tests
        run: yarn test:e2e --setup --concurrency=1 --project=${{ matrix.project }}

  api_ce_pg:
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    needs: [changes, lint, unit_back, unit_front]
    name: '[CE] API Integration (postgres, node: ${{ matrix.node }})'
    strategy:
      matrix:
        node: [16, 18, 20]
    services:
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_USER: strapi
          POSTGRES_PASSWORD: strapi
          POSTGRES_DB: strapi_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          -v /__w/.github/workflows/db/postgres:/docker-entrypoint-initdb.d
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: Monorepo install
        uses: ./.github/actions/yarn-nm-install
      - uses: ./.github/actions/run-api-tests
        with:
          dbOptions: '--dbclient=postgres --dbhost=localhost --dbport=5432 --dbname=strapi_test --dbusername=strapi --dbpassword=strapi'

  api_ce_mysql:
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    needs: [changes, lint, unit_back, unit_front]
    name: '[CE] API Integration (mysql:latest, client: ${{ matrix.db_client }}, node: ${{ matrix.node }})'
    strategy:
      matrix:
        node: [16, 18, 20]
        db_client: ['mysql', 'mysql2']
    services:
      mysql:
        image: bitnami/mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: strapi
          MYSQL_USER: strapi
          MYSQL_PASSWORD: strapi
          MYSQL_DATABASE: strapi_test
          MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          # Maps tcp port 5432 on service container to the host
          - 3306:3306
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: Monorepo install
        uses: ./.github/actions/yarn-nm-install
      - uses: ./.github/actions/run-api-tests
        with:
          dbOptions: '--dbclient=${{ matrix.db_client }} --dbhost=localhost --dbport=3306 --dbname=strapi_test --dbusername=strapi --dbpassword=strapi'

  api_ce_mysql_5:
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    needs: [changes, lint, unit_back, unit_front]
    name: '[CE] API Integration (mysql:5, client: ${{ matrix.db_client }} , node: ${{ matrix.node }})'
    strategy:
      matrix:
        node: [16, 18, 20]
        db_client: ['mysql', 'mysql2']
    services:
      mysql:
        image: bitnami/mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: strapi
          MYSQL_USER: strapi
          MYSQL_PASSWORD: strapi
          MYSQL_DATABASE: strapi_test
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          # Maps tcp port 5432 on service container to the host
          - 3306:3306
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: Monorepo install
        uses: ./.github/actions/yarn-nm-install
      - uses: ./.github/actions/run-api-tests
        with:
          dbOptions: '--dbclient=${{ matrix.db_client }} --dbhost=localhost --dbport=3306 --dbname=strapi_test --dbusername=strapi --dbpassword=strapi'

  api_ce_sqlite:
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    needs: [changes, lint, unit_back, unit_front]
    name: '[CE] API Integration (sqlite, client: ${{ matrix.sqlite_pkg }}, node: ${{ matrix.node }})'
    strategy:
      matrix:
        node: [16, 18, 20]
        sqlite_pkg: ['better-sqlite3', 'sqlite3']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: Monorepo install
        uses: ./.github/actions/yarn-nm-install
      - uses: ./.github/actions/run-api-tests
        env:
          SQLITE_PKG: ${{ matrix.sqlite_pkg }}
        with:
          dbOptions: '--dbclient=sqlite-legacy --dbfile=./tmp/data.db'

  # EE
  api_ee_pg:
    runs-on: ubuntu-latest
    needs: [changes, lint, unit_back, unit_front]
    name: '[EE] API Integration (postgres, node: ${{ matrix.node }})'
    if: needs.changes.outputs.backend == 'true' && github.event.pull_request.head.repo.full_name == github.repository && !(github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]')
    env:
      STRAPI_LICENSE: ${{ secrets.strapiLicense }}
    strategy:
      matrix:
        node: [16, 18, 20]
    services:
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_USER: strapi
          POSTGRES_PASSWORD: strapi
          POSTGRES_DB: strapi_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          -v /__w/.github/workflows/db/postgres:/docker-entrypoint-initdb.d
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: Monorepo install
        uses: ./.github/actions/yarn-nm-install
      - uses: ./.github/actions/run-api-tests
        with:
          dbOptions: '--dbclient=postgres --dbhost=localhost --dbport=5432 --dbname=strapi_test --dbusername=strapi --dbpassword=strapi'
          runEE: true

  api_ee_mysql:
    runs-on: ubuntu-latest
    needs: [changes, lint, unit_back, unit_front]
    name: '[EE] API Integration (mysql:latest, client: ${{ matrix.db_client }}, node: ${{ matrix.node }})'
    if: needs.changes.outputs.backend == 'true' && github.event.pull_request.head.repo.full_name == github.repository && !(github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]')
    env:
      STRAPI_LICENSE: ${{ secrets.strapiLicense }}
    strategy:
      matrix:
        node: [16, 18, 20]
        db_client: ['mysql', 'mysql2']
    services:
      mysql:
        image: bitnami/mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: strapi
          MYSQL_USER: strapi
          MYSQL_PASSWORD: strapi
          MYSQL_DATABASE: strapi_test
          MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          # Maps tcp port 5432 on service container to the host
          - 3306:3306
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: Monorepo install
        uses: ./.github/actions/yarn-nm-install
      - uses: ./.github/actions/run-api-tests
        with:
          dbOptions: '--dbclient=${{ matrix.db_client }} --dbhost=localhost --dbport=3306 --dbname=strapi_test --dbusername=strapi --dbpassword=strapi'
          runEE: true

  api_ee_sqlite:
    runs-on: ubuntu-latest
    needs: [changes, lint, unit_back, unit_front]
    name: '[EE] API Integration (sqlite, client: ${{ matrix.sqlite_pkg }}, node: ${{ matrix.node }})'
    if: needs.changes.outputs.backend == 'true' && github.event.pull_request.head.repo.full_name == github.repository && !(github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]')
    env:
      STRAPI_LICENSE: ${{ secrets.strapiLicense }}
    strategy:
      matrix:
        node: [16, 18, 20]
        sqlite_pkg: ['better-sqlite3', 'sqlite3']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: Monorepo install
        uses: ./.github/actions/yarn-nm-install
      - uses: ./.github/actions/run-api-tests
        env:
          SQLITE_PKG: ${{ matrix.sqlite_pkg }}
        with:
          dbOptions: '--dbclient=sqlite --dbfile=./tmp/data.db'
          runEE: true
